import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.107'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

repositories {
	maven {
		url "https://maven.ftb.dev/releases"
		content {
			includeGroup "dev.ftb.mods"
		}
	}

	maven {
		url "https://maven.architectury.dev/"
		content {
			includeGroup "dev.architectury"
		}
	}

	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}

}

base {
    archivesName = mod_id
	version = mod_version
	group = mod_group_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
java {
	withSourcesJar()
}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

	        jvmArgument("-XX:+IgnoreUnrecognizedVMOptions")
	        jvmArgument("-XX:+AllowEnhancedClassRedefinition")
	        systemProperty("mixin.debug.export", "true")
	        if (it.name.startsWith("client")) {
		        programArguments.addAll("--width", "1920", "--height", "1080")
	        }
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
	compileOnly "curse.maven:ftb-quests-forge-289412:6874989" // ftb-quests-neoforge-2101.1.14.jar
	localRuntime "curse.maven:ftb-quests-forge-289412:6874989" // ftb-quests-neoforge-2101.1.14.jar
	implementation "curse.maven:ftb-library-forge-404465:6874538"
	implementation "curse.maven:ftb-teams-forge-404468:6119437"
	implementation "curse.maven:architectury-api-419699:5786327"

	localRuntime "curse.maven:jei-238222:6829086"
	localRuntime "curse.maven:jade-324717:6853386"
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
		    neo_version_range      : neo_version_range
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId = mod_id
	        from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.jar {
	manifest {
		attributes(
			[
				"Specification-Title" : mod_id,
				"Specification-Vendor" : "Uncandango",
				"Specification-Version" : mod_version,
				"Implementation-Title" : mod_name,
				"Implementation-Version" : mod_version,
				"Implementation-Vendor" : "Uncandango",
				"Implementation-Timestamp" : LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
			]
		)
	}
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
